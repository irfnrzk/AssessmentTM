{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function takeLast(count) {\n  return function takeLastOperatorFunction(source) {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nclass TakeLastOperator {\n  constructor(total) {\n    this.total = total;\n\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n\n}\n\nclass TakeLastSubscriber extends Subscriber {\n  constructor(destination, total) {\n    super(destination);\n    this.total = total;\n    this.ring = new Array();\n    this.count = 0;\n  }\n\n  _next(value) {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  _complete() {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = count++ % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n\n}","map":{"version":3,"names":["Subscriber","ArgumentOutOfRangeError","empty","takeLast","count","takeLastOperatorFunction","source","lift","TakeLastOperator","constructor","total","call","subscriber","subscribe","TakeLastSubscriber","destination","ring","Array","_next","value","length","push","index","_complete","i","idx","next","complete"],"sources":["C:/Project/AngularApp/node_modules/rxjs/_esm2015/internal/operators/takeLast.js"],"sourcesContent":["import { Subscriber } from '../Subscriber';\r\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\r\nimport { empty } from '../observable/empty';\r\nexport function takeLast(count) {\r\n    return function takeLastOperatorFunction(source) {\r\n        if (count === 0) {\r\n            return empty();\r\n        }\r\n        else {\r\n            return source.lift(new TakeLastOperator(count));\r\n        }\r\n    };\r\n}\r\nclass TakeLastOperator {\r\n    constructor(total) {\r\n        this.total = total;\r\n        if (this.total < 0) {\r\n            throw new ArgumentOutOfRangeError;\r\n        }\r\n    }\r\n    call(subscriber, source) {\r\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\r\n    }\r\n}\r\nclass TakeLastSubscriber extends Subscriber {\r\n    constructor(destination, total) {\r\n        super(destination);\r\n        this.total = total;\r\n        this.ring = new Array();\r\n        this.count = 0;\r\n    }\r\n    _next(value) {\r\n        const ring = this.ring;\r\n        const total = this.total;\r\n        const count = this.count++;\r\n        if (ring.length < total) {\r\n            ring.push(value);\r\n        }\r\n        else {\r\n            const index = count % total;\r\n            ring[index] = value;\r\n        }\r\n    }\r\n    _complete() {\r\n        const destination = this.destination;\r\n        let count = this.count;\r\n        if (count > 0) {\r\n            const total = this.count >= this.total ? this.total : this.count;\r\n            const ring = this.ring;\r\n            for (let i = 0; i < total; i++) {\r\n                const idx = (count++) % total;\r\n                destination.next(ring[idx]);\r\n            }\r\n        }\r\n        destination.complete();\r\n    }\r\n}\r\n"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;EAC5B,OAAO,SAASC,wBAAT,CAAkCC,MAAlC,EAA0C;IAC7C,IAAIF,KAAK,KAAK,CAAd,EAAiB;MACb,OAAOF,KAAK,EAAZ;IACH,CAFD,MAGK;MACD,OAAOI,MAAM,CAACC,IAAP,CAAY,IAAIC,gBAAJ,CAAqBJ,KAArB,CAAZ,CAAP;IACH;EACJ,CAPD;AAQH;;AACD,MAAMI,gBAAN,CAAuB;EACnBC,WAAW,CAACC,KAAD,EAAQ;IACf,KAAKA,KAAL,GAAaA,KAAb;;IACA,IAAI,KAAKA,KAAL,GAAa,CAAjB,EAAoB;MAChB,MAAM,IAAIT,uBAAJ,EAAN;IACH;EACJ;;EACDU,IAAI,CAACC,UAAD,EAAaN,MAAb,EAAqB;IACrB,OAAOA,MAAM,CAACO,SAAP,CAAiB,IAAIC,kBAAJ,CAAuBF,UAAvB,EAAmC,KAAKF,KAAxC,CAAjB,CAAP;EACH;;AATkB;;AAWvB,MAAMI,kBAAN,SAAiCd,UAAjC,CAA4C;EACxCS,WAAW,CAACM,WAAD,EAAcL,KAAd,EAAqB;IAC5B,MAAMK,WAAN;IACA,KAAKL,KAAL,GAAaA,KAAb;IACA,KAAKM,IAAL,GAAY,IAAIC,KAAJ,EAAZ;IACA,KAAKb,KAAL,GAAa,CAAb;EACH;;EACDc,KAAK,CAACC,KAAD,EAAQ;IACT,MAAMH,IAAI,GAAG,KAAKA,IAAlB;IACA,MAAMN,KAAK,GAAG,KAAKA,KAAnB;IACA,MAAMN,KAAK,GAAG,KAAKA,KAAL,EAAd;;IACA,IAAIY,IAAI,CAACI,MAAL,GAAcV,KAAlB,EAAyB;MACrBM,IAAI,CAACK,IAAL,CAAUF,KAAV;IACH,CAFD,MAGK;MACD,MAAMG,KAAK,GAAGlB,KAAK,GAAGM,KAAtB;MACAM,IAAI,CAACM,KAAD,CAAJ,GAAcH,KAAd;IACH;EACJ;;EACDI,SAAS,GAAG;IACR,MAAMR,WAAW,GAAG,KAAKA,WAAzB;IACA,IAAIX,KAAK,GAAG,KAAKA,KAAjB;;IACA,IAAIA,KAAK,GAAG,CAAZ,EAAe;MACX,MAAMM,KAAK,GAAG,KAAKN,KAAL,IAAc,KAAKM,KAAnB,GAA2B,KAAKA,KAAhC,GAAwC,KAAKN,KAA3D;MACA,MAAMY,IAAI,GAAG,KAAKA,IAAlB;;MACA,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,KAApB,EAA2Bc,CAAC,EAA5B,EAAgC;QAC5B,MAAMC,GAAG,GAAIrB,KAAK,EAAN,GAAYM,KAAxB;QACAK,WAAW,CAACW,IAAZ,CAAiBV,IAAI,CAACS,GAAD,CAArB;MACH;IACJ;;IACDV,WAAW,CAACY,QAAZ;EACH;;AA/BuC"},"metadata":{},"sourceType":"module"}