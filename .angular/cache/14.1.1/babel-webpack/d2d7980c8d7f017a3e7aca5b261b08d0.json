{"ast":null,"code":"/**\r\n * @license Angular v14.1.0\r\n * (c) 2010-2022 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\nimport { computeMsgId } from '@angular/compiler';\nexport { computeMsgId as ɵcomputeMsgId } from '@angular/compiler';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * The character used to mark the start and end of a \"block\" in a `$localize` tagged string.\r\n * A block can indicate metadata about the message or specify a name of a placeholder for a\r\n * substitution expressions.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize`Hello, ${title}:title:!`;\r\n * $localize`:meaning|description@@id:source message text`;\r\n * ```\r\n */\n\nconst BLOCK_MARKER$1 = ':';\n/**\r\n * The marker used to separate a message's \"meaning\" from its \"description\" in a metadata block.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `:correct|Indicates that the user got the answer correct: Right!`;\r\n * $localize `:movement|Button label for moving to the right: Right!`;\r\n * ```\r\n */\n\nconst MEANING_SEPARATOR = '|';\n/**\r\n * The marker used to separate a message's custom \"id\" from its \"description\" in a metadata block.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `:A welcome message on the home page@@myApp-homepage-welcome: Welcome!`;\r\n * ```\r\n */\n\nconst ID_SEPARATOR = '@@';\n/**\r\n * The marker used to separate legacy message ids from the rest of a metadata block.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `:@@custom-id␟2df64767cd895a8fabe3e18b94b5b6b6f9e2e3f0: Welcome!`;\r\n * ```\r\n *\r\n * Note that this character is the \"symbol for the unit separator\" (␟) not the \"unit separator\r\n * character\" itself, since that has no visual representation. See https://graphemica.com/%E2%90%9F.\r\n *\r\n * Here is some background for the original \"unit separator character\":\r\n * https://stackoverflow.com/questions/8695118/whats-the-file-group-record-unit-separator-control-characters-and-its-usage\r\n */\n\nconst LEGACY_ID_INDICATOR = '\\u241F';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Parse a `$localize` tagged string into a structure that can be used for translation or\r\n * extraction.\r\n *\r\n * See `ParsedMessage` for an example.\r\n */\n\nfunction parseMessage(messageParts, expressions, location, messagePartLocations, expressionLocations = []) {\n  const substitutions = {};\n  const substitutionLocations = {};\n  const associatedMessageIds = {};\n  const metadata = parseMetadata(messageParts[0], messageParts.raw[0]);\n  const cleanedMessageParts = [metadata.text];\n  const placeholderNames = [];\n  let messageString = metadata.text;\n\n  for (let i = 1; i < messageParts.length; i++) {\n    const {\n      messagePart,\n      placeholderName = computePlaceholderName(i),\n      associatedMessageId\n    } = parsePlaceholder(messageParts[i], messageParts.raw[i]);\n    messageString += `{$${placeholderName}}${messagePart}`;\n\n    if (expressions !== undefined) {\n      substitutions[placeholderName] = expressions[i - 1];\n      substitutionLocations[placeholderName] = expressionLocations[i - 1];\n    }\n\n    placeholderNames.push(placeholderName);\n\n    if (associatedMessageId !== undefined) {\n      associatedMessageIds[placeholderName] = associatedMessageId;\n    }\n\n    cleanedMessageParts.push(messagePart);\n  }\n\n  const messageId = metadata.customId || computeMsgId(messageString, metadata.meaning || '');\n  const legacyIds = metadata.legacyIds ? metadata.legacyIds.filter(id => id !== messageId) : [];\n  return {\n    id: messageId,\n    legacyIds,\n    substitutions,\n    substitutionLocations,\n    text: messageString,\n    customId: metadata.customId,\n    meaning: metadata.meaning || '',\n    description: metadata.description || '',\n    messageParts: cleanedMessageParts,\n    messagePartLocations,\n    placeholderNames,\n    associatedMessageIds,\n    location\n  };\n}\n/**\r\n * Parse the given message part (`cooked` + `raw`) to extract the message metadata from the text.\r\n *\r\n * If the message part has a metadata block this function will extract the `meaning`,\r\n * `description`, `customId` and `legacyId` (if provided) from the block. These metadata properties\r\n * are serialized in the string delimited by `|`, `@@` and `␟` respectively.\r\n *\r\n * (Note that `␟` is the `LEGACY_ID_INDICATOR` - see `constants.ts`.)\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * `:meaning|description@@custom-id:`\r\n * `:meaning|@@custom-id:`\r\n * `:meaning|description:`\r\n * `:description@@custom-id:`\r\n * `:meaning|:`\r\n * `:description:`\r\n * `:@@custom-id:`\r\n * `:meaning|description@@custom-id␟legacy-id-1␟legacy-id-2:`\r\n * ```\r\n *\r\n * @param cooked The cooked version of the message part to parse.\r\n * @param raw The raw version of the message part to parse.\r\n * @returns A object containing any metadata that was parsed from the message part.\r\n */\n\n\nfunction parseMetadata(cooked, raw) {\n  const {\n    text: messageString,\n    block\n  } = splitBlock(cooked, raw);\n\n  if (block === undefined) {\n    return {\n      text: messageString\n    };\n  } else {\n    const [meaningDescAndId, ...legacyIds] = block.split(LEGACY_ID_INDICATOR);\n    const [meaningAndDesc, customId] = meaningDescAndId.split(ID_SEPARATOR, 2);\n    let [meaning, description] = meaningAndDesc.split(MEANING_SEPARATOR, 2);\n\n    if (description === undefined) {\n      description = meaning;\n      meaning = undefined;\n    }\n\n    if (description === '') {\n      description = undefined;\n    }\n\n    return {\n      text: messageString,\n      meaning,\n      description,\n      customId,\n      legacyIds\n    };\n  }\n}\n/**\r\n * Parse the given message part (`cooked` + `raw`) to extract any placeholder metadata from the\r\n * text.\r\n *\r\n * If the message part has a metadata block this function will extract the `placeholderName` and\r\n * `associatedMessageId` (if provided) from the block.\r\n *\r\n * These metadata properties are serialized in the string delimited by `@@`.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * `:placeholder-name@@associated-id:`\r\n * ```\r\n *\r\n * @param cooked The cooked version of the message part to parse.\r\n * @param raw The raw version of the message part to parse.\r\n * @returns A object containing the metadata (`placeholderName` and `associatedMessageId`) of the\r\n *     preceding placeholder, along with the static text that follows.\r\n */\n\n\nfunction parsePlaceholder(cooked, raw) {\n  const {\n    text: messagePart,\n    block\n  } = splitBlock(cooked, raw);\n\n  if (block === undefined) {\n    return {\n      messagePart\n    };\n  } else {\n    const [placeholderName, associatedMessageId] = block.split(ID_SEPARATOR);\n    return {\n      messagePart,\n      placeholderName,\n      associatedMessageId\n    };\n  }\n}\n/**\r\n * Split a message part (`cooked` + `raw`) into an optional delimited \"block\" off the front and the\r\n * rest of the text of the message part.\r\n *\r\n * Blocks appear at the start of message parts. They are delimited by a colon `:` character at the\r\n * start and end of the block.\r\n *\r\n * If the block is in the first message part then it will be metadata about the whole message:\r\n * meaning, description, id.  Otherwise it will be metadata about the immediately preceding\r\n * substitution: placeholder name.\r\n *\r\n * Since blocks are optional, it is possible that the content of a message block actually starts\r\n * with a block marker. In this case the marker must be escaped `\\:`.\r\n *\r\n * @param cooked The cooked version of the message part to parse.\r\n * @param raw The raw version of the message part to parse.\r\n * @returns An object containing the `text` of the message part and the text of the `block`, if it\r\n * exists.\r\n * @throws an error if the `block` is unterminated\r\n */\n\n\nfunction splitBlock(cooked, raw) {\n  if (raw.charAt(0) !== BLOCK_MARKER$1) {\n    return {\n      text: cooked\n    };\n  } else {\n    const endOfBlock = findEndOfBlock(cooked, raw);\n    return {\n      block: cooked.substring(1, endOfBlock),\n      text: cooked.substring(endOfBlock + 1)\n    };\n  }\n}\n\nfunction computePlaceholderName(index) {\n  return index === 1 ? 'PH' : `PH_${index - 1}`;\n}\n/**\r\n * Find the end of a \"marked block\" indicated by the first non-escaped colon.\r\n *\r\n * @param cooked The cooked string (where escaped chars have been processed)\r\n * @param raw The raw string (where escape sequences are still in place)\r\n *\r\n * @returns the index of the end of block marker\r\n * @throws an error if the block is unterminated\r\n */\n\n\nfunction findEndOfBlock(cooked, raw) {\n  for (let cookedIndex = 1, rawIndex = 1; cookedIndex < cooked.length; cookedIndex++, rawIndex++) {\n    if (raw[rawIndex] === '\\\\') {\n      rawIndex++;\n    } else if (cooked[cookedIndex] === BLOCK_MARKER$1) {\n      return cookedIndex;\n    }\n  }\n\n  throw new Error(`Unterminated $localize metadata block in \"${raw}\".`);\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nclass MissingTranslationError extends Error {\n  constructor(parsedMessage) {\n    super(`No translation found for ${describeMessage(parsedMessage)}.`);\n    this.parsedMessage = parsedMessage;\n    this.type = 'MissingTranslationError';\n  }\n\n}\n\nfunction isMissingTranslationError(e) {\n  return e.type === 'MissingTranslationError';\n}\n/**\r\n * Translate the text of the `$localize` tagged-string (i.e. `messageParts` and\r\n * `substitutions`) using the given `translations`.\r\n *\r\n * The tagged-string is parsed to extract its `messageId` which is used to find an appropriate\r\n * `ParsedTranslation`. If this doesn't match and there are legacy ids then try matching a\r\n * translation using those.\r\n *\r\n * If one is found then it is used to translate the message into a new set of `messageParts` and\r\n * `substitutions`.\r\n * The translation may reorder (or remove) substitutions as appropriate.\r\n *\r\n * If there is no translation with a matching message id then an error is thrown.\r\n * If a translation contains a placeholder that is not found in the message being translated then an\r\n * error is thrown.\r\n */\n\n\nfunction translate$1(translations, messageParts, substitutions) {\n  const message = parseMessage(messageParts, substitutions); // Look up the translation using the messageId, and then the legacyId if available.\n\n  let translation = translations[message.id]; // If the messageId did not match a translation, try matching the legacy ids instead\n\n  if (message.legacyIds !== undefined) {\n    for (let i = 0; i < message.legacyIds.length && translation === undefined; i++) {\n      translation = translations[message.legacyIds[i]];\n    }\n  }\n\n  if (translation === undefined) {\n    throw new MissingTranslationError(message);\n  }\n\n  return [translation.messageParts, translation.placeholderNames.map(placeholder => {\n    if (message.substitutions.hasOwnProperty(placeholder)) {\n      return message.substitutions[placeholder];\n    } else {\n      throw new Error(`There is a placeholder name mismatch with the translation provided for the message ${describeMessage(message)}.\\n` + `The translation contains a placeholder with name ${placeholder}, which does not exist in the message.`);\n    }\n  })];\n}\n/**\r\n * Parse the `messageParts` and `placeholderNames` out of a target `message`.\r\n *\r\n * Used by `loadTranslations()` to convert target message strings into a structure that is more\r\n * appropriate for doing translation.\r\n *\r\n * @param message the message to be parsed.\r\n */\n\n\nfunction parseTranslation(messageString) {\n  const parts = messageString.split(/{\\$([^}]*)}/);\n  const messageParts = [parts[0]];\n  const placeholderNames = [];\n\n  for (let i = 1; i < parts.length - 1; i += 2) {\n    placeholderNames.push(parts[i]);\n    messageParts.push(`${parts[i + 1]}`);\n  }\n\n  const rawMessageParts = messageParts.map(part => part.charAt(0) === BLOCK_MARKER$1 ? '\\\\' + part : part);\n  return {\n    text: messageString,\n    messageParts: makeTemplateObject(messageParts, rawMessageParts),\n    placeholderNames\n  };\n}\n/**\r\n * Create a `ParsedTranslation` from a set of `messageParts` and `placeholderNames`.\r\n *\r\n * @param messageParts The message parts to appear in the ParsedTranslation.\r\n * @param placeholderNames The names of the placeholders to intersperse between the `messageParts`.\r\n */\n\n\nfunction makeParsedTranslation(messageParts, placeholderNames = []) {\n  let messageString = messageParts[0];\n\n  for (let i = 0; i < placeholderNames.length; i++) {\n    messageString += `{$${placeholderNames[i]}}${messageParts[i + 1]}`;\n  }\n\n  return {\n    text: messageString,\n    messageParts: makeTemplateObject(messageParts, messageParts),\n    placeholderNames\n  };\n}\n/**\r\n * Create the specialized array that is passed to tagged-string tag functions.\r\n *\r\n * @param cooked The message parts with their escape codes processed.\r\n * @param raw The message parts with their escaped codes as-is.\r\n */\n\n\nfunction makeTemplateObject(cooked, raw) {\n  Object.defineProperty(cooked, 'raw', {\n    value: raw\n  });\n  return cooked;\n}\n\nfunction describeMessage(message) {\n  const meaningString = message.meaning && ` - \"${message.meaning}\"`;\n  const legacy = message.legacyIds && message.legacyIds.length > 0 ? ` [${message.legacyIds.map(l => `\"${l}\"`).join(', ')}]` : '';\n  return `\"${message.id}\"${legacy} (\"${message.text}\"${meaningString})`;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Load translations for use by `$localize`, if doing runtime translation.\r\n *\r\n * If the `$localize` tagged strings are not going to be replaced at compiled time, it is possible\r\n * to load a set of translations that will be applied to the `$localize` tagged strings at runtime,\r\n * in the browser.\r\n *\r\n * Loading a new translation will overwrite a previous translation if it has the same `MessageId`.\r\n *\r\n * Note that `$localize` messages are only processed once, when the tagged string is first\r\n * encountered, and does not provide dynamic language changing without refreshing the browser.\r\n * Loading new translations later in the application life-cycle will not change the translated text\r\n * of messages that have already been translated.\r\n *\r\n * The message IDs and translations are in the same format as that rendered to \"simple JSON\"\r\n * translation files when extracting messages. In particular, placeholders in messages are rendered\r\n * using the `{$PLACEHOLDER_NAME}` syntax. For example the message from the following template:\r\n *\r\n * ```html\r\n * <div i18n>pre<span>inner-pre<b>bold</b>inner-post</span>post</div>\r\n * ```\r\n *\r\n * would have the following form in the `translations` map:\r\n *\r\n * ```ts\r\n * {\r\n *   \"2932901491976224757\":\r\n *      \"pre{$START_TAG_SPAN}inner-pre{$START_BOLD_TEXT}bold{$CLOSE_BOLD_TEXT}inner-post{$CLOSE_TAG_SPAN}post\"\r\n * }\r\n * ```\r\n *\r\n * @param translations A map from message ID to translated message.\r\n *\r\n * These messages are processed and added to a lookup based on their `MessageId`.\r\n *\r\n * @see `clearTranslations()` for removing translations loaded using this function.\r\n * @see `$localize` for tagging messages as needing to be translated.\r\n * @publicApi\r\n */\n\n\nfunction loadTranslations(translations) {\n  // Ensure the translate function exists\n  if (!$localize.translate) {\n    $localize.translate = translate;\n  }\n\n  if (!$localize.TRANSLATIONS) {\n    $localize.TRANSLATIONS = {};\n  }\n\n  Object.keys(translations).forEach(key => {\n    $localize.TRANSLATIONS[key] = parseTranslation(translations[key]);\n  });\n}\n/**\r\n * Remove all translations for `$localize`, if doing runtime translation.\r\n *\r\n * All translations that had been loading into memory using `loadTranslations()` will be removed.\r\n *\r\n * @see `loadTranslations()` for loading translations at runtime.\r\n * @see `$localize` for tagging messages as needing to be translated.\r\n *\r\n * @publicApi\r\n */\n\n\nfunction clearTranslations() {\n  $localize.translate = undefined;\n  $localize.TRANSLATIONS = {};\n}\n/**\r\n * Translate the text of the given message, using the loaded translations.\r\n *\r\n * This function may reorder (or remove) substitutions as indicated in the matching translation.\r\n */\n\n\nfunction translate(messageParts, substitutions) {\n  try {\n    return translate$1($localize.TRANSLATIONS, messageParts, substitutions);\n  } catch (e) {\n    console.warn(e.message);\n    return [messageParts, substitutions];\n  }\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// Always use __globalThis if available, which is the spec-defined global variable across all\n// environments, then fallback to __global first, because in Node tests both __global and\n// __window may be defined and _global should be __global in that case. Note: Typeof/Instanceof\n// checks are considered side-effects in Terser. We explicitly mark this as side-effect free:\n// https://github.com/terser/terser/issues/250.\n\n\nconst _global = /* @__PURE__ */(() => typeof globalThis !== 'undefined' && globalThis || typeof global !== 'undefined' && global || typeof window !== 'undefined' && window || typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self)();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Tag a template literal string for localization.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `some string to localize`\r\n * ```\r\n *\r\n * **Providing meaning, description and id**\r\n *\r\n * You can optionally specify one or more of `meaning`, `description` and `id` for a localized\r\n * string by pre-pending it with a colon delimited block of the form:\r\n *\r\n * ```ts\r\n * $localize`:meaning|description@@id:source message text`;\r\n *\r\n * $localize`:meaning|:source message text`;\r\n * $localize`:description:source message text`;\r\n * $localize`:@@id:source message text`;\r\n * ```\r\n *\r\n * This format is the same as that used for `i18n` markers in Angular templates. See the\r\n * [Angular i18n guide](guide/i18n-common-prepare#mark-text-in-component-template).\r\n *\r\n * **Naming placeholders**\r\n *\r\n * If the template literal string contains expressions, then the expressions will be automatically\r\n * associated with placeholder names for you.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `Hi ${name}! There are ${items.length} items.`;\r\n * ```\r\n *\r\n * will generate a message-source of `Hi {$PH}! There are {$PH_1} items`.\r\n *\r\n * The recommended practice is to name the placeholder associated with each expression though.\r\n *\r\n * Do this by providing the placeholder name wrapped in `:` characters directly after the\r\n * expression. These placeholder names are stripped out of the rendered localized string.\r\n *\r\n * For example, to name the `items.length` expression placeholder `itemCount` you write:\r\n *\r\n * ```ts\r\n * $localize `There are ${items.length}:itemCount: items`;\r\n * ```\r\n *\r\n * **Escaping colon markers**\r\n *\r\n * If you need to use a `:` character directly at the start of a tagged string that has no\r\n * metadata block, or directly after a substitution expression that has no name you must escape\r\n * the `:` by preceding it with a backslash:\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * // message has a metadata block so no need to escape colon\r\n * $localize `:some description::this message starts with a colon (:)`;\r\n * // no metadata block so the colon must be escaped\r\n * $localize `\\:this message starts with a colon (:)`;\r\n * ```\r\n *\r\n * ```ts\r\n * // named substitution so no need to escape colon\r\n * $localize `${label}:label:: ${}`\r\n * // anonymous substitution so colon must be escaped\r\n * $localize `${label}\\: ${}`\r\n * ```\r\n *\r\n * **Processing localized strings:**\r\n *\r\n * There are three scenarios:\r\n *\r\n * * **compile-time inlining**: the `$localize` tag is transformed at compile time by a\r\n * transpiler, removing the tag and replacing the template literal string with a translated\r\n * literal string from a collection of translations provided to the transpilation tool.\r\n *\r\n * * **run-time evaluation**: the `$localize` tag is a run-time function that replaces and\r\n * reorders the parts (static strings and expressions) of the template literal string with strings\r\n * from a collection of translations loaded at run-time.\r\n *\r\n * * **pass-through evaluation**: the `$localize` tag is a run-time function that simply evaluates\r\n * the original template literal string without applying any translations to the parts. This\r\n * version is used during development or where there is no need to translate the localized\r\n * template literals.\r\n *\r\n * @param messageParts a collection of the static parts of the template string.\r\n * @param expressions a collection of the values of each placeholder in the template string.\r\n * @returns the translated string, with the `messageParts` and `expressions` interleaved together.\r\n *\r\n * @globalApi\r\n * @publicApi\r\n */\n\n\nconst $localize$1 = function (messageParts, ...expressions) {\n  if ($localize$1.translate) {\n    // Don't use array expansion here to avoid the compiler adding `__read()` helper unnecessarily.\n    const translation = $localize$1.translate(messageParts, expressions);\n    messageParts = translation[0];\n    expressions = translation[1];\n  }\n\n  let message = stripBlock(messageParts[0], messageParts.raw[0]);\n\n  for (let i = 1; i < messageParts.length; i++) {\n    message += expressions[i - 1] + stripBlock(messageParts[i], messageParts.raw[i]);\n  }\n\n  return message;\n};\n\nconst BLOCK_MARKER = ':';\n/**\r\n * Strip a delimited \"block\" from the start of the `messagePart`, if it is found.\r\n *\r\n * If a marker character (:) actually appears in the content at the start of a tagged string or\r\n * after a substitution expression, where a block has not been provided the character must be\r\n * escaped with a backslash, `\\:`. This function checks for this by looking at the `raw`\r\n * messagePart, which should still contain the backslash.\r\n *\r\n * @param messagePart The cooked message part to process.\r\n * @param rawMessagePart The raw message part to check.\r\n * @returns the message part with the placeholder name stripped, if found.\r\n * @throws an error if the block is unterminated\r\n */\n\nfunction stripBlock(messagePart, rawMessagePart) {\n  return rawMessagePart.charAt(0) === BLOCK_MARKER ? messagePart.substring(findEndOfBlock(messagePart, rawMessagePart) + 1) : messagePart;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nexport { clearTranslations, loadTranslations, $localize$1 as ɵ$localize, MissingTranslationError as ɵMissingTranslationError, _global as ɵ_global, findEndOfBlock as ɵfindEndOfBlock, isMissingTranslationError as ɵisMissingTranslationError, makeParsedTranslation as ɵmakeParsedTranslation, makeTemplateObject as ɵmakeTemplateObject, parseMessage as ɵparseMessage, parseMetadata as ɵparseMetadata, parseTranslation as ɵparseTranslation, splitBlock as ɵsplitBlock, translate$1 as ɵtranslate };","map":{"version":3,"names":["computeMsgId","ɵcomputeMsgId","BLOCK_MARKER$1","MEANING_SEPARATOR","ID_SEPARATOR","LEGACY_ID_INDICATOR","parseMessage","messageParts","expressions","location","messagePartLocations","expressionLocations","substitutions","substitutionLocations","associatedMessageIds","metadata","parseMetadata","raw","cleanedMessageParts","text","placeholderNames","messageString","i","length","messagePart","placeholderName","computePlaceholderName","associatedMessageId","parsePlaceholder","undefined","push","messageId","customId","meaning","legacyIds","filter","id","description","cooked","block","splitBlock","meaningDescAndId","split","meaningAndDesc","charAt","endOfBlock","findEndOfBlock","substring","index","cookedIndex","rawIndex","Error","MissingTranslationError","constructor","parsedMessage","describeMessage","type","isMissingTranslationError","e","translate$1","translations","message","translation","map","placeholder","hasOwnProperty","parseTranslation","parts","rawMessageParts","part","makeTemplateObject","makeParsedTranslation","Object","defineProperty","value","meaningString","legacy","l","join","loadTranslations","$localize","translate","TRANSLATIONS","keys","forEach","key","clearTranslations","console","warn","_global","globalThis","global","window","self","WorkerGlobalScope","$localize$1","stripBlock","BLOCK_MARKER","rawMessagePart","ɵ$localize","ɵMissingTranslationError","ɵ_global","ɵfindEndOfBlock","ɵisMissingTranslationError","ɵmakeParsedTranslation","ɵmakeTemplateObject","ɵparseMessage","ɵparseMetadata","ɵparseTranslation","ɵsplitBlock","ɵtranslate"],"sources":["C:/Project/AngularApp/node_modules/@angular/localize/fesm2020/localize.mjs"],"sourcesContent":["/**\r\n * @license Angular v14.1.0\r\n * (c) 2010-2022 Google LLC. https://angular.io/\r\n * License: MIT\r\n */\r\n\r\nimport { computeMsgId } from '@angular/compiler';\r\nexport { computeMsgId as ɵcomputeMsgId } from '@angular/compiler';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * The character used to mark the start and end of a \"block\" in a `$localize` tagged string.\r\n * A block can indicate metadata about the message or specify a name of a placeholder for a\r\n * substitution expressions.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize`Hello, ${title}:title:!`;\r\n * $localize`:meaning|description@@id:source message text`;\r\n * ```\r\n */\r\nconst BLOCK_MARKER$1 = ':';\r\n/**\r\n * The marker used to separate a message's \"meaning\" from its \"description\" in a metadata block.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `:correct|Indicates that the user got the answer correct: Right!`;\r\n * $localize `:movement|Button label for moving to the right: Right!`;\r\n * ```\r\n */\r\nconst MEANING_SEPARATOR = '|';\r\n/**\r\n * The marker used to separate a message's custom \"id\" from its \"description\" in a metadata block.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `:A welcome message on the home page@@myApp-homepage-welcome: Welcome!`;\r\n * ```\r\n */\r\nconst ID_SEPARATOR = '@@';\r\n/**\r\n * The marker used to separate legacy message ids from the rest of a metadata block.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `:@@custom-id␟2df64767cd895a8fabe3e18b94b5b6b6f9e2e3f0: Welcome!`;\r\n * ```\r\n *\r\n * Note that this character is the \"symbol for the unit separator\" (␟) not the \"unit separator\r\n * character\" itself, since that has no visual representation. See https://graphemica.com/%E2%90%9F.\r\n *\r\n * Here is some background for the original \"unit separator character\":\r\n * https://stackoverflow.com/questions/8695118/whats-the-file-group-record-unit-separator-control-characters-and-its-usage\r\n */\r\nconst LEGACY_ID_INDICATOR = '\\u241F';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Parse a `$localize` tagged string into a structure that can be used for translation or\r\n * extraction.\r\n *\r\n * See `ParsedMessage` for an example.\r\n */\r\nfunction parseMessage(messageParts, expressions, location, messagePartLocations, expressionLocations = []) {\r\n    const substitutions = {};\r\n    const substitutionLocations = {};\r\n    const associatedMessageIds = {};\r\n    const metadata = parseMetadata(messageParts[0], messageParts.raw[0]);\r\n    const cleanedMessageParts = [metadata.text];\r\n    const placeholderNames = [];\r\n    let messageString = metadata.text;\r\n    for (let i = 1; i < messageParts.length; i++) {\r\n        const { messagePart, placeholderName = computePlaceholderName(i), associatedMessageId } = parsePlaceholder(messageParts[i], messageParts.raw[i]);\r\n        messageString += `{$${placeholderName}}${messagePart}`;\r\n        if (expressions !== undefined) {\r\n            substitutions[placeholderName] = expressions[i - 1];\r\n            substitutionLocations[placeholderName] = expressionLocations[i - 1];\r\n        }\r\n        placeholderNames.push(placeholderName);\r\n        if (associatedMessageId !== undefined) {\r\n            associatedMessageIds[placeholderName] = associatedMessageId;\r\n        }\r\n        cleanedMessageParts.push(messagePart);\r\n    }\r\n    const messageId = metadata.customId || computeMsgId(messageString, metadata.meaning || '');\r\n    const legacyIds = metadata.legacyIds ? metadata.legacyIds.filter(id => id !== messageId) : [];\r\n    return {\r\n        id: messageId,\r\n        legacyIds,\r\n        substitutions,\r\n        substitutionLocations,\r\n        text: messageString,\r\n        customId: metadata.customId,\r\n        meaning: metadata.meaning || '',\r\n        description: metadata.description || '',\r\n        messageParts: cleanedMessageParts,\r\n        messagePartLocations,\r\n        placeholderNames,\r\n        associatedMessageIds,\r\n        location,\r\n    };\r\n}\r\n/**\r\n * Parse the given message part (`cooked` + `raw`) to extract the message metadata from the text.\r\n *\r\n * If the message part has a metadata block this function will extract the `meaning`,\r\n * `description`, `customId` and `legacyId` (if provided) from the block. These metadata properties\r\n * are serialized in the string delimited by `|`, `@@` and `␟` respectively.\r\n *\r\n * (Note that `␟` is the `LEGACY_ID_INDICATOR` - see `constants.ts`.)\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * `:meaning|description@@custom-id:`\r\n * `:meaning|@@custom-id:`\r\n * `:meaning|description:`\r\n * `:description@@custom-id:`\r\n * `:meaning|:`\r\n * `:description:`\r\n * `:@@custom-id:`\r\n * `:meaning|description@@custom-id␟legacy-id-1␟legacy-id-2:`\r\n * ```\r\n *\r\n * @param cooked The cooked version of the message part to parse.\r\n * @param raw The raw version of the message part to parse.\r\n * @returns A object containing any metadata that was parsed from the message part.\r\n */\r\nfunction parseMetadata(cooked, raw) {\r\n    const { text: messageString, block } = splitBlock(cooked, raw);\r\n    if (block === undefined) {\r\n        return { text: messageString };\r\n    }\r\n    else {\r\n        const [meaningDescAndId, ...legacyIds] = block.split(LEGACY_ID_INDICATOR);\r\n        const [meaningAndDesc, customId] = meaningDescAndId.split(ID_SEPARATOR, 2);\r\n        let [meaning, description] = meaningAndDesc.split(MEANING_SEPARATOR, 2);\r\n        if (description === undefined) {\r\n            description = meaning;\r\n            meaning = undefined;\r\n        }\r\n        if (description === '') {\r\n            description = undefined;\r\n        }\r\n        return { text: messageString, meaning, description, customId, legacyIds };\r\n    }\r\n}\r\n/**\r\n * Parse the given message part (`cooked` + `raw`) to extract any placeholder metadata from the\r\n * text.\r\n *\r\n * If the message part has a metadata block this function will extract the `placeholderName` and\r\n * `associatedMessageId` (if provided) from the block.\r\n *\r\n * These metadata properties are serialized in the string delimited by `@@`.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * `:placeholder-name@@associated-id:`\r\n * ```\r\n *\r\n * @param cooked The cooked version of the message part to parse.\r\n * @param raw The raw version of the message part to parse.\r\n * @returns A object containing the metadata (`placeholderName` and `associatedMessageId`) of the\r\n *     preceding placeholder, along with the static text that follows.\r\n */\r\nfunction parsePlaceholder(cooked, raw) {\r\n    const { text: messagePart, block } = splitBlock(cooked, raw);\r\n    if (block === undefined) {\r\n        return { messagePart };\r\n    }\r\n    else {\r\n        const [placeholderName, associatedMessageId] = block.split(ID_SEPARATOR);\r\n        return { messagePart, placeholderName, associatedMessageId };\r\n    }\r\n}\r\n/**\r\n * Split a message part (`cooked` + `raw`) into an optional delimited \"block\" off the front and the\r\n * rest of the text of the message part.\r\n *\r\n * Blocks appear at the start of message parts. They are delimited by a colon `:` character at the\r\n * start and end of the block.\r\n *\r\n * If the block is in the first message part then it will be metadata about the whole message:\r\n * meaning, description, id.  Otherwise it will be metadata about the immediately preceding\r\n * substitution: placeholder name.\r\n *\r\n * Since blocks are optional, it is possible that the content of a message block actually starts\r\n * with a block marker. In this case the marker must be escaped `\\:`.\r\n *\r\n * @param cooked The cooked version of the message part to parse.\r\n * @param raw The raw version of the message part to parse.\r\n * @returns An object containing the `text` of the message part and the text of the `block`, if it\r\n * exists.\r\n * @throws an error if the `block` is unterminated\r\n */\r\nfunction splitBlock(cooked, raw) {\r\n    if (raw.charAt(0) !== BLOCK_MARKER$1) {\r\n        return { text: cooked };\r\n    }\r\n    else {\r\n        const endOfBlock = findEndOfBlock(cooked, raw);\r\n        return {\r\n            block: cooked.substring(1, endOfBlock),\r\n            text: cooked.substring(endOfBlock + 1),\r\n        };\r\n    }\r\n}\r\nfunction computePlaceholderName(index) {\r\n    return index === 1 ? 'PH' : `PH_${index - 1}`;\r\n}\r\n/**\r\n * Find the end of a \"marked block\" indicated by the first non-escaped colon.\r\n *\r\n * @param cooked The cooked string (where escaped chars have been processed)\r\n * @param raw The raw string (where escape sequences are still in place)\r\n *\r\n * @returns the index of the end of block marker\r\n * @throws an error if the block is unterminated\r\n */\r\nfunction findEndOfBlock(cooked, raw) {\r\n    for (let cookedIndex = 1, rawIndex = 1; cookedIndex < cooked.length; cookedIndex++, rawIndex++) {\r\n        if (raw[rawIndex] === '\\\\') {\r\n            rawIndex++;\r\n        }\r\n        else if (cooked[cookedIndex] === BLOCK_MARKER$1) {\r\n            return cookedIndex;\r\n        }\r\n    }\r\n    throw new Error(`Unterminated $localize metadata block in \"${raw}\".`);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass MissingTranslationError extends Error {\r\n    constructor(parsedMessage) {\r\n        super(`No translation found for ${describeMessage(parsedMessage)}.`);\r\n        this.parsedMessage = parsedMessage;\r\n        this.type = 'MissingTranslationError';\r\n    }\r\n}\r\nfunction isMissingTranslationError(e) {\r\n    return e.type === 'MissingTranslationError';\r\n}\r\n/**\r\n * Translate the text of the `$localize` tagged-string (i.e. `messageParts` and\r\n * `substitutions`) using the given `translations`.\r\n *\r\n * The tagged-string is parsed to extract its `messageId` which is used to find an appropriate\r\n * `ParsedTranslation`. If this doesn't match and there are legacy ids then try matching a\r\n * translation using those.\r\n *\r\n * If one is found then it is used to translate the message into a new set of `messageParts` and\r\n * `substitutions`.\r\n * The translation may reorder (or remove) substitutions as appropriate.\r\n *\r\n * If there is no translation with a matching message id then an error is thrown.\r\n * If a translation contains a placeholder that is not found in the message being translated then an\r\n * error is thrown.\r\n */\r\nfunction translate$1(translations, messageParts, substitutions) {\r\n    const message = parseMessage(messageParts, substitutions);\r\n    // Look up the translation using the messageId, and then the legacyId if available.\r\n    let translation = translations[message.id];\r\n    // If the messageId did not match a translation, try matching the legacy ids instead\r\n    if (message.legacyIds !== undefined) {\r\n        for (let i = 0; i < message.legacyIds.length && translation === undefined; i++) {\r\n            translation = translations[message.legacyIds[i]];\r\n        }\r\n    }\r\n    if (translation === undefined) {\r\n        throw new MissingTranslationError(message);\r\n    }\r\n    return [\r\n        translation.messageParts, translation.placeholderNames.map(placeholder => {\r\n            if (message.substitutions.hasOwnProperty(placeholder)) {\r\n                return message.substitutions[placeholder];\r\n            }\r\n            else {\r\n                throw new Error(`There is a placeholder name mismatch with the translation provided for the message ${describeMessage(message)}.\\n` +\r\n                    `The translation contains a placeholder with name ${placeholder}, which does not exist in the message.`);\r\n            }\r\n        })\r\n    ];\r\n}\r\n/**\r\n * Parse the `messageParts` and `placeholderNames` out of a target `message`.\r\n *\r\n * Used by `loadTranslations()` to convert target message strings into a structure that is more\r\n * appropriate for doing translation.\r\n *\r\n * @param message the message to be parsed.\r\n */\r\nfunction parseTranslation(messageString) {\r\n    const parts = messageString.split(/{\\$([^}]*)}/);\r\n    const messageParts = [parts[0]];\r\n    const placeholderNames = [];\r\n    for (let i = 1; i < parts.length - 1; i += 2) {\r\n        placeholderNames.push(parts[i]);\r\n        messageParts.push(`${parts[i + 1]}`);\r\n    }\r\n    const rawMessageParts = messageParts.map(part => part.charAt(0) === BLOCK_MARKER$1 ? '\\\\' + part : part);\r\n    return {\r\n        text: messageString,\r\n        messageParts: makeTemplateObject(messageParts, rawMessageParts),\r\n        placeholderNames,\r\n    };\r\n}\r\n/**\r\n * Create a `ParsedTranslation` from a set of `messageParts` and `placeholderNames`.\r\n *\r\n * @param messageParts The message parts to appear in the ParsedTranslation.\r\n * @param placeholderNames The names of the placeholders to intersperse between the `messageParts`.\r\n */\r\nfunction makeParsedTranslation(messageParts, placeholderNames = []) {\r\n    let messageString = messageParts[0];\r\n    for (let i = 0; i < placeholderNames.length; i++) {\r\n        messageString += `{$${placeholderNames[i]}}${messageParts[i + 1]}`;\r\n    }\r\n    return {\r\n        text: messageString,\r\n        messageParts: makeTemplateObject(messageParts, messageParts),\r\n        placeholderNames\r\n    };\r\n}\r\n/**\r\n * Create the specialized array that is passed to tagged-string tag functions.\r\n *\r\n * @param cooked The message parts with their escape codes processed.\r\n * @param raw The message parts with their escaped codes as-is.\r\n */\r\nfunction makeTemplateObject(cooked, raw) {\r\n    Object.defineProperty(cooked, 'raw', { value: raw });\r\n    return cooked;\r\n}\r\nfunction describeMessage(message) {\r\n    const meaningString = message.meaning && ` - \"${message.meaning}\"`;\r\n    const legacy = message.legacyIds && message.legacyIds.length > 0 ?\r\n        ` [${message.legacyIds.map(l => `\"${l}\"`).join(', ')}]` :\r\n        '';\r\n    return `\"${message.id}\"${legacy} (\"${message.text}\"${meaningString})`;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Load translations for use by `$localize`, if doing runtime translation.\r\n *\r\n * If the `$localize` tagged strings are not going to be replaced at compiled time, it is possible\r\n * to load a set of translations that will be applied to the `$localize` tagged strings at runtime,\r\n * in the browser.\r\n *\r\n * Loading a new translation will overwrite a previous translation if it has the same `MessageId`.\r\n *\r\n * Note that `$localize` messages are only processed once, when the tagged string is first\r\n * encountered, and does not provide dynamic language changing without refreshing the browser.\r\n * Loading new translations later in the application life-cycle will not change the translated text\r\n * of messages that have already been translated.\r\n *\r\n * The message IDs and translations are in the same format as that rendered to \"simple JSON\"\r\n * translation files when extracting messages. In particular, placeholders in messages are rendered\r\n * using the `{$PLACEHOLDER_NAME}` syntax. For example the message from the following template:\r\n *\r\n * ```html\r\n * <div i18n>pre<span>inner-pre<b>bold</b>inner-post</span>post</div>\r\n * ```\r\n *\r\n * would have the following form in the `translations` map:\r\n *\r\n * ```ts\r\n * {\r\n *   \"2932901491976224757\":\r\n *      \"pre{$START_TAG_SPAN}inner-pre{$START_BOLD_TEXT}bold{$CLOSE_BOLD_TEXT}inner-post{$CLOSE_TAG_SPAN}post\"\r\n * }\r\n * ```\r\n *\r\n * @param translations A map from message ID to translated message.\r\n *\r\n * These messages are processed and added to a lookup based on their `MessageId`.\r\n *\r\n * @see `clearTranslations()` for removing translations loaded using this function.\r\n * @see `$localize` for tagging messages as needing to be translated.\r\n * @publicApi\r\n */\r\nfunction loadTranslations(translations) {\r\n    // Ensure the translate function exists\r\n    if (!$localize.translate) {\r\n        $localize.translate = translate;\r\n    }\r\n    if (!$localize.TRANSLATIONS) {\r\n        $localize.TRANSLATIONS = {};\r\n    }\r\n    Object.keys(translations).forEach(key => {\r\n        $localize.TRANSLATIONS[key] = parseTranslation(translations[key]);\r\n    });\r\n}\r\n/**\r\n * Remove all translations for `$localize`, if doing runtime translation.\r\n *\r\n * All translations that had been loading into memory using `loadTranslations()` will be removed.\r\n *\r\n * @see `loadTranslations()` for loading translations at runtime.\r\n * @see `$localize` for tagging messages as needing to be translated.\r\n *\r\n * @publicApi\r\n */\r\nfunction clearTranslations() {\r\n    $localize.translate = undefined;\r\n    $localize.TRANSLATIONS = {};\r\n}\r\n/**\r\n * Translate the text of the given message, using the loaded translations.\r\n *\r\n * This function may reorder (or remove) substitutions as indicated in the matching translation.\r\n */\r\nfunction translate(messageParts, substitutions) {\r\n    try {\r\n        return translate$1($localize.TRANSLATIONS, messageParts, substitutions);\r\n    }\r\n    catch (e) {\r\n        console.warn(e.message);\r\n        return [messageParts, substitutions];\r\n    }\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Always use __globalThis if available, which is the spec-defined global variable across all\r\n// environments, then fallback to __global first, because in Node tests both __global and\r\n// __window may be defined and _global should be __global in that case. Note: Typeof/Instanceof\r\n// checks are considered side-effects in Terser. We explicitly mark this as side-effect free:\r\n// https://github.com/terser/terser/issues/250.\r\nconst _global = ( /* @__PURE__ */(() => (typeof globalThis !== 'undefined' && globalThis) ||\r\n    (typeof global !== 'undefined' && global) || (typeof window !== 'undefined' && window) ||\r\n    (typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\r\n        self instanceof WorkerGlobalScope && self))());\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/**\r\n * Tag a template literal string for localization.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `some string to localize`\r\n * ```\r\n *\r\n * **Providing meaning, description and id**\r\n *\r\n * You can optionally specify one or more of `meaning`, `description` and `id` for a localized\r\n * string by pre-pending it with a colon delimited block of the form:\r\n *\r\n * ```ts\r\n * $localize`:meaning|description@@id:source message text`;\r\n *\r\n * $localize`:meaning|:source message text`;\r\n * $localize`:description:source message text`;\r\n * $localize`:@@id:source message text`;\r\n * ```\r\n *\r\n * This format is the same as that used for `i18n` markers in Angular templates. See the\r\n * [Angular i18n guide](guide/i18n-common-prepare#mark-text-in-component-template).\r\n *\r\n * **Naming placeholders**\r\n *\r\n * If the template literal string contains expressions, then the expressions will be automatically\r\n * associated with placeholder names for you.\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * $localize `Hi ${name}! There are ${items.length} items.`;\r\n * ```\r\n *\r\n * will generate a message-source of `Hi {$PH}! There are {$PH_1} items`.\r\n *\r\n * The recommended practice is to name the placeholder associated with each expression though.\r\n *\r\n * Do this by providing the placeholder name wrapped in `:` characters directly after the\r\n * expression. These placeholder names are stripped out of the rendered localized string.\r\n *\r\n * For example, to name the `items.length` expression placeholder `itemCount` you write:\r\n *\r\n * ```ts\r\n * $localize `There are ${items.length}:itemCount: items`;\r\n * ```\r\n *\r\n * **Escaping colon markers**\r\n *\r\n * If you need to use a `:` character directly at the start of a tagged string that has no\r\n * metadata block, or directly after a substitution expression that has no name you must escape\r\n * the `:` by preceding it with a backslash:\r\n *\r\n * For example:\r\n *\r\n * ```ts\r\n * // message has a metadata block so no need to escape colon\r\n * $localize `:some description::this message starts with a colon (:)`;\r\n * // no metadata block so the colon must be escaped\r\n * $localize `\\:this message starts with a colon (:)`;\r\n * ```\r\n *\r\n * ```ts\r\n * // named substitution so no need to escape colon\r\n * $localize `${label}:label:: ${}`\r\n * // anonymous substitution so colon must be escaped\r\n * $localize `${label}\\: ${}`\r\n * ```\r\n *\r\n * **Processing localized strings:**\r\n *\r\n * There are three scenarios:\r\n *\r\n * * **compile-time inlining**: the `$localize` tag is transformed at compile time by a\r\n * transpiler, removing the tag and replacing the template literal string with a translated\r\n * literal string from a collection of translations provided to the transpilation tool.\r\n *\r\n * * **run-time evaluation**: the `$localize` tag is a run-time function that replaces and\r\n * reorders the parts (static strings and expressions) of the template literal string with strings\r\n * from a collection of translations loaded at run-time.\r\n *\r\n * * **pass-through evaluation**: the `$localize` tag is a run-time function that simply evaluates\r\n * the original template literal string without applying any translations to the parts. This\r\n * version is used during development or where there is no need to translate the localized\r\n * template literals.\r\n *\r\n * @param messageParts a collection of the static parts of the template string.\r\n * @param expressions a collection of the values of each placeholder in the template string.\r\n * @returns the translated string, with the `messageParts` and `expressions` interleaved together.\r\n *\r\n * @globalApi\r\n * @publicApi\r\n */\r\nconst $localize$1 = function (messageParts, ...expressions) {\r\n    if ($localize$1.translate) {\r\n        // Don't use array expansion here to avoid the compiler adding `__read()` helper unnecessarily.\r\n        const translation = $localize$1.translate(messageParts, expressions);\r\n        messageParts = translation[0];\r\n        expressions = translation[1];\r\n    }\r\n    let message = stripBlock(messageParts[0], messageParts.raw[0]);\r\n    for (let i = 1; i < messageParts.length; i++) {\r\n        message += expressions[i - 1] + stripBlock(messageParts[i], messageParts.raw[i]);\r\n    }\r\n    return message;\r\n};\r\nconst BLOCK_MARKER = ':';\r\n/**\r\n * Strip a delimited \"block\" from the start of the `messagePart`, if it is found.\r\n *\r\n * If a marker character (:) actually appears in the content at the start of a tagged string or\r\n * after a substitution expression, where a block has not been provided the character must be\r\n * escaped with a backslash, `\\:`. This function checks for this by looking at the `raw`\r\n * messagePart, which should still contain the backslash.\r\n *\r\n * @param messagePart The cooked message part to process.\r\n * @param rawMessagePart The raw message part to check.\r\n * @returns the message part with the placeholder name stripped, if found.\r\n * @throws an error if the block is unterminated\r\n */\r\nfunction stripBlock(messagePart, rawMessagePart) {\r\n    return rawMessagePart.charAt(0) === BLOCK_MARKER ?\r\n        messagePart.substring(findEndOfBlock(messagePart, rawMessagePart) + 1) :\r\n        messagePart;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\nexport { clearTranslations, loadTranslations, $localize$1 as ɵ$localize, MissingTranslationError as ɵMissingTranslationError, _global as ɵ_global, findEndOfBlock as ɵfindEndOfBlock, isMissingTranslationError as ɵisMissingTranslationError, makeParsedTranslation as ɵmakeParsedTranslation, makeTemplateObject as ɵmakeTemplateObject, parseMessage as ɵparseMessage, parseMetadata as ɵparseMetadata, parseTranslation as ɵparseTranslation, splitBlock as ɵsplitBlock, translate$1 as ɵtranslate };\r\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}